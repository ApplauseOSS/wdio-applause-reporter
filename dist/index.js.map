{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\nimport { Client } from 'webdriver';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\ndeclare let browser: Client;\n\nexport class ApplauseReporter extends WDIOReporter {\n  private autoapi?: AutoApi;\n  private readonly contructorPassedOptions: Partial<ApplauseOptions>;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(optionsIn: Partial<ApplauseOptions>) {\n    /*\n     * make reporter to write to the output stream by default\n     */\n    const options = { ...{ stdout: true }, ...optionsIn };\n    super(options);\n    this.contructorPassedOptions = options;\n    this.uidToResultIdMap = {};\n  }\n\n  onRunnerStart(runnerStats: RunnerStats): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const capabilitiesOptions = (runnerStats.config.capabilities as any)[\n      'applause:options'\n    ] as Partial<ApplauseOptions>;\n    const dups = ApplauseReporter.getExplanationForConfigOptionsLoadedFromMultiplePlaces(\n      { options: capabilitiesOptions, source: 'capabilities' },\n      { options: this.contructorPassedOptions, source: 'Reporter construction' }\n    );\n    if (dups !== undefined) {\n      throw new Error(`Differing configuration options detected: ${dups}`);\n    }\n    const mergedOptions = {\n      ...capabilitiesOptions,\n      ...this.contructorPassedOptions,\n    };\n    if (mergedOptions.baseUrl === undefined) {\n      throw new Error('baseUrl is required');\n    }\n    if (mergedOptions.apiKey === undefined) {\n      throw new Error('apiKey is required');\n    }\n    if (mergedOptions.productId === undefined) {\n      throw new Error('productId is required');\n    }\n\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: mergedOptions.baseUrl,\n        apiKey: mergedOptions.apiKey,\n      },\n      productId: mergedOptions.productId,\n    });\n  }\n\n  static getExplanationForConfigOptionsLoadedFromMultiplePlaces(\n    ...options: { options: Record<string | number, string>; source: string }[]\n  ): string | undefined {\n    const duplicateSources = ApplauseReporter.getDuplicates(\n      options.map(option => option.source)\n    );\n    if (duplicateSources.length > 0) {\n      throw new Error(\n        `duplicate options sources, please make sure all options sources are named with unique string. Duplicates: {${duplicateSources.join(\n          '\\n'\n        )}}`\n      );\n    }\n    // show the sources and values for this option if seen more than once\n    // option name-> option values -> source\n    const optionMap: Record<string, Record<string, string>> = {};\n    options.flat(1).forEach(optionsObj => {\n      Object.entries(optionsObj.options).forEach(entry => {\n        const [optionName, optionValue] = entry;\n        const optionValuesToSourcesMap =\n          optionMap[optionName] === undefined ? {} : optionMap[optionName];\n        optionValuesToSourcesMap[optionValue] = optionsObj.source;\n        optionMap[optionName] = optionValuesToSourcesMap;\n      });\n    });\n    // loop over all the option keys with more than one value\n    const dups = Object.entries(optionMap)\n      .filter(entry => Object.keys(entry[1]).length > 1)\n      .map(entry => {\n        const [optionName, optionValue] = entry;\n        const innerStr = Object.entries(optionValue)\n          .map(entry => {\n            const [optionValue, optionSource] = entry;\n            return `\\t\\tSet to '${optionValue}' in '${optionSource}'`;\n          })\n          .join('\\n');\n        return `Config Option '${optionName}' has multiple values! \\n ${innerStr}`;\n      })\n      .join('\\n');\n    return dups.length > 0 ? dups : undefined;\n  }\n\n  /**\n   * Courtesy of StackOverflow\n   * @param objects list of strings to get duplicates from\n   * @returns list of strings seen more than once\n   */\n  static getDuplicates(objects: string[]): string[] {\n    const instanceCounts = objects\n    .map((name) => {\n      return {\n        count: 1,\n        name: name\n      }\n    })\n    .reduce((a: any, b) => {\n      a[b.name] = (a[b.name] || 0) + b.count\n      return a\n    }, {})\n    // grabs dups from counts\n    return Object.keys(instanceCounts).filter((a) => instanceCounts[a] > 1);\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.autoapi!.startTestCase(\n      testStats.title,\n      browser.sessionId\n    ).then(res => {\n      return res.data.testResultId;\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestPass(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.PASSED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestFail(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.FAILED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestRetry(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestSkip(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch(() => console.error('Unable to retrieve Applause TestResultIds'));\n    const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["WDIOReporter","AutoApi","TestResultStatus","writeFileSync","pathJoin"],"mappings":"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"}