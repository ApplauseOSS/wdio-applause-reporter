!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@wdio/reporter"),require("applause-reporter-common")):"function"==typeof define&&define.amd?define(["exports","@wdio/reporter","applause-reporter-common"],s):s((e="undefined"!=typeof globalThis?globalThis:e||self)["wdio-applause-reporter"]={},e.WDIOReporter,e.applauseReporterCommon)}(this,(function(e,s,t){"use strict";e.ApplausePlatformWdioReporter=class extends s{publciApi;config;inflightCalls=[];logger;constructor(e){super({stdout:!0,...e}),this.config=t.loadConfig({properties:e}),this.logger=e.logger||t.constructDefaultLogger(),this.publciApi=new t.PublicApi(this.config,this.logger)}onTestPass(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) passed`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.PASSED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}onTestFail(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) failed`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.FAILED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}onTestSkip(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) skipped`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.SKIPPED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}async onRunnerEnd(){await Promise.all(this.inflightCalls)}get isSynchronised(){return 0===this.publciApi.getCallsInFlight}},e.ApplauseResultService=class{reporter;logger;activeTest;constructor(e){this.logger=e.logger||t.constructDefaultLogger(),this.reporter=new t.ApplauseReporter(t.loadConfig(e),this.logger)}async beforeTest(e){const s=this.lookupTitle(e);this.logger.info("Starting test: "+s),this.activeTest=s,await this.reporter.startTestCase(s,s,{providerSessionIds:[browser.sessionId]})}async beforeScenario(e){const s=this.lookupTitle(e);this.logger.info("Starting Scenario: "+s),this.activeTest=s,await this.reporter.startTestCase(s,s,{providerSessionIds:[browser.sessionId]})}async afterCommand(e,s,r){if(this.activeTest&&e.startsWith("saveScreenshot")){const e=s[0].split("/").pop()||"screenshot.png";this.logger.debug("Capturing screenshot"),await this.reporter.attachTestCaseAsset(this.activeTest,e,browser.sessionId,t.AssetType.SCREENSHOT,Buffer.from(r,"base64"))}}async afterTest(e,s,r){this.activeTest=void 0;const i=this.lookupTitle(e);r.passed?this.logger.info("Test Passed: "+i):this.logger.error("Test Failed: "+i),await this.captureAssets(i,r.passed),await this.reporter.submitTestCaseResult(i,r.passed?t.TestResultStatus.PASSED:t.TestResultStatus.FAILED,{failureReason:r.exception})}async afterScenario(e,s){this.activeTest=void 0;const r=this.lookupTitle(e);s.passed?this.logger.info("Test Passed: "+r):this.logger.error("Test Failed: "+r),await this.captureAssets(r,s.passed),await this.reporter.submitTestCaseResult(r,s.passed?t.TestResultStatus.PASSED:t.TestResultStatus.FAILED,{failureReason:s.exception})}lookupTitle(e){return e.fullName?e.fullName:e.fullTitle?e.fullTitle:e.parent&&e.title?e.parent+" "+e.title:e.pickle&&e.pickle.name?e.pickle.name:"<Unknown Test>"}async captureAssets(e,s){const r=[];try{if(!s){const e=Buffer.from(await browser.takeScreenshot(),"base64");r.push(["failure_screenshot.png",t.AssetType.FAILURE_SCREENSHOT,e])}r.push(["page_source.html",t.AssetType.PAGE_SOURCE,Buffer.from(await browser.getPageSource())]),r.push(["console_log.txt",t.AssetType.CONSOLE_LOG,Buffer.from(t.APPLAUSE_LOG_RECORDS.getLogs().join("\n"))]),await Promise.allSettled(r.map((([s,t,r])=>this.reporter.attachTestCaseAsset(e,s,browser.sessionId,t,r))))}catch(e){this.logger.error("Error capturing assets"),this.logger.error(e)}}},e.ApplauseRunService=class{reporter;logger;constructor(e){this.logger=e.logger||t.constructDefaultLogger(),this.reporter=new t.ApplauseReporter(t.loadConfig(e),this.logger)}async onPrepare(){const e=await this.reporter.runnerStart();process.env.APPLAUSE_RUN_ID=`${e}`}async onComplete(){await this.reporter.runnerEnd()}}}));
//# sourceMappingURL=index.min.js.map
