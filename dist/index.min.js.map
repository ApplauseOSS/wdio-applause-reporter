{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\nimport { Client } from 'webdriver';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\ndeclare let browser: Client;\n\nexport class ApplauseReporter extends WDIOReporter {\n  private autoapi?: AutoApi;\n  private readonly contructorPassedOptions: Partial<ApplauseOptions>;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(optionsIn: Partial<ApplauseOptions>) {\n    /*\n     * make reporter to write to the output stream by default\n     */\n    const options = { ...{ stdout: true }, ...optionsIn };\n    super(options);\n    this.contructorPassedOptions = options;\n    this.uidToResultIdMap = {};\n  }\n\n  onRunnerStart(runnerStats: RunnerStats): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const capabilitiesOptions = (runnerStats.config.capabilities as any)[\n      'applause:options'\n    ] as Partial<ApplauseOptions>;\n    const dups = ApplauseReporter.getExplanationForConfigOptionsLoadedFromMultiplePlaces(\n      { options: capabilitiesOptions, source: 'capabilities' },\n      { options: this.contructorPassedOptions, source: 'Reporter construction' }\n    );\n    if (dups !== undefined) {\n      throw new Error(`Differing configuration options detected: ${dups}`);\n    }\n    const mergedOptions = {\n      ...capabilitiesOptions,\n      ...this.contructorPassedOptions,\n    };\n    if (mergedOptions.baseUrl === undefined) {\n      throw new Error('baseUrl is required');\n    }\n    if (mergedOptions.apiKey === undefined) {\n      throw new Error('apiKey is required');\n    }\n    if (mergedOptions.productId === undefined) {\n      throw new Error('productId is required');\n    }\n\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: mergedOptions.baseUrl,\n        apiKey: mergedOptions.apiKey,\n      },\n      productId: mergedOptions.productId,\n    });\n  }\n\n  static getExplanationForConfigOptionsLoadedFromMultiplePlaces(\n    ...options: { options: Record<string | number, string>; source: string }[]\n  ): string | undefined {\n    const duplicateSources = ApplauseReporter.getDuplicates(\n      options.map(option => option.source)\n    );\n    if (duplicateSources.length > 0) {\n      throw new Error(\n        `duplicate options sources, please make sure all options sources are named with unique string. Duplicates: {${duplicateSources.join(\n          '\\n'\n        )}}`\n      );\n    }\n    // show the sources and values for this option if seen more than once\n    // option name-> option values -> source\n    const optionMap: Record<string, Record<string, string>> = {};\n    options.flat(1).forEach(optionsObj => {\n      Object.entries(optionsObj.options).forEach(entry => {\n        const [optionName, optionValue] = entry;\n        const optionValuesToSourcesMap =\n          optionMap[optionName] === undefined ? {} : optionMap[optionName];\n        optionValuesToSourcesMap[optionValue] = optionsObj.source;\n        optionMap[optionName] = optionValuesToSourcesMap;\n      });\n    });\n    // loop over all the option keys with more than one value\n    const dups = Object.entries(optionMap)\n      .filter(entry => Object.keys(entry[1]).length > 1)\n      .map(entry => {\n        const [optionName, optionValue] = entry;\n        const innerStr = Object.entries(optionValue)\n          .map(entry => {\n            const [optionValue, optionSource] = entry;\n            return `\\t\\tSet to '${optionValue}' in '${optionSource}'`;\n          })\n          .join('\\n');\n        return `Config Option '${optionName}' has multiple values! \\n ${innerStr}`;\n      })\n      .join('\\n');\n    return dups.length > 0 ? dups : undefined;\n  }\n\n  /**\n   * Courtesy of StackOverflow\n   * @param objects list of strings to get duplicates from\n   * @returns list of strings seen more than once\n   */\n  static getDuplicates(objects: string[]): string[] {\n    const instanceCounts = objects\n    .map((name) => {\n      return {\n        count: 1,\n        name: name\n      }\n    })\n    .reduce((a: any, b) => {\n      a[b.name] = (a[b.name] || 0) + b.count\n      return a\n    }, {})\n    // grabs dups from counts\n    return Object.keys(instanceCounts).filter((a) => instanceCounts[a] > 1);\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.autoapi!.startTestCase(\n      testStats.title,\n      browser.sessionId\n    ).then(res => {\n      return res.data.testResultId;\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestPass(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.PASSED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestFail(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.FAILED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestRetry(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestSkip(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi!.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch(() => console.error('Unable to retrieve Applause TestResultIds'));\n    const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["ApplauseReporter","WDIOReporter","constructor","optionsIn","options","stdout","super","this","contructorPassedOptions","uidToResultIdMap","isSynchronised","undefined","autoapi","getCallsInFlight","onRunnerStart","runnerStats","capabilitiesOptions","config","capabilities","dups","getExplanationForConfigOptionsLoadedFromMultiplePlaces","source","Error","mergedOptions","baseUrl","apiKey","productId","AutoApi","clientConfig","static","duplicateSources","getDuplicates","map","option","length","join","optionMap","flat","forEach","optionsObj","Object","entries","entry","optionName","optionValue","optionValuesToSourcesMap","filter","keys","innerStr","optionSource","objects","instanceCounts","name","count","reduce","a","b","onTestStart","testStats","uid","startTestCase","title","browser","sessionId","then","res","data","testResultId","async","test","currentResultId","submitTestResult","TestResultStatus","PASSED","FAILED","SKIPPED","_stats","valuePromises","values","resultIds","Promise","all","vals","catch","console","error","jsonArray","getProviderSessionLinks","info","JSON","stringify","outputPath","outputDir","writeFileSync","pathJoin"],"mappings":"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"}