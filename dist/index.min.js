!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@wdio/reporter"),require("applause-reporter-common")):"function"==typeof define&&define.amd?define(["exports","@wdio/reporter","applause-reporter-common"],s):s((e="undefined"!=typeof globalThis?globalThis:e||self)["wdio-applause-reporter"]={},e.WDIOReporter,e.applauseReporterCommon)}(this,(function(e,s,t){"use strict";class r extends Error{message;constructor(e){super("ApplauseSkip: "+e),this.message=e}}e.ApplausePlatformWdioReporter=class extends s{publciApi;config;inflightCalls=[];logger;constructor(e){super({stdout:!0,...e}),this.config=t.loadConfig({properties:e}),this.logger=e.logger||t.constructDefaultLogger(),this.publciApi=new t.PublicApi(this.config,this.logger)}onTestPass(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) passed`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.PASSED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}onTestFail(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) failed`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.FAILED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}onTestSkip(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){this.logger.info(`Test ${e.fullTitle}(${s}) skipped`);const r=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.SKIPPED,sessionDetailsJson:{value:{deviceName:r["appium:deviceName"],orientation:r["appium:orientation"],platformName:r.platformName,platformVersion:r["appium:platformVersion"],browserName:r.browserName,browserVersion:r.browserVersion}}}))}}async onRunnerEnd(){await Promise.all(this.inflightCalls)}get isSynchronised(){return 0===this.publciApi.getCallsInFlight}},e.ApplauseResultService=class{reporter;logger;activeTest;constructor(e){this.logger=e.logger||t.constructDefaultLogger(),this.reporter=new t.ApplauseReporter(t.loadConfig(e),this.logger)}async beforeTest(e){const s=this.lookupTitle(e);this.logger.info("Starting test: "+s),this.activeTest=s,await this.reporter.startTestCase(s,s,{providerSessionIds:[]})}async beforeScenario(e){const s=this.lookupTitle(e);this.logger.info("Starting Scenario: "+s),this.activeTest=s,await this.reporter.startTestCase(s,s,{providerSessionIds:[]})}async afterCommand(e,s,r){if(this.activeTest&&e.startsWith("saveScreenshot")){const e=s[0].split("/").pop()||"screenshot.png";this.logger.debug("Capturing screenshot"),await this.reporter.attachTestCaseAsset(this.activeTest,e,browser.sessionId,t.AssetType.SCREENSHOT,Buffer.from(r,"base64"))}}async afterTest(e,s,i){this.activeTest=void 0;const o=this.lookupTitle(e),a=i.error?.message||i.exception;let l;i.passed?(this.logger.info("Test Passed: "+o+" ("+browser.sessionId+")"),l=t.TestResultStatus.PASSED):e.pending||i.error instanceof r?(this.logger.warn("Test Skipped: "+o),l=t.TestResultStatus.SKIPPED):(this.logger.error("Test Failed: "+o),l=t.TestResultStatus.FAILED),await this.reporter.submitTestCaseResult(o,l,{failureReason:this.cleanErrorMessage(a),providerSessionGuids:[browser.sessionId]}),await this.captureAssets(o,i.passed)}async afterScenario(e,s){this.activeTest=void 0;const i=this.lookupTitle(e),o=s.error?.message||s.exception;let a;s.passed?(this.logger.info("Test Passed: "+i+" ("+browser.sessionId+")"),a=t.TestResultStatus.PASSED):s.error instanceof r?(this.logger.info("Test Skipped: "+i),a=t.TestResultStatus.SKIPPED):(this.logger.error("Test Failed: "+i),a=t.TestResultStatus.FAILED),await this.reporter.submitTestCaseResult(i,a,{failureReason:this.cleanErrorMessage(o),providerSessionGuids:[browser.sessionId]}),await this.captureAssets(i,s.passed)}lookupTitle(e){return e.fullName?e.fullName:e.fullTitle?e.fullTitle:e.parent&&e.title?e.parent+" "+e.title:e.pickle&&e.pickle.name?e.pickle.name:"<Unknown Test>"}async captureAssets(e,s){const r=[];try{if(!s){const e=Buffer.from(await browser.takeScreenshot(),"base64");r.push(["failure_screenshot.png",t.AssetType.FAILURE_SCREENSHOT,e])}r.push(["page_source.html",t.AssetType.PAGE_SOURCE,Buffer.from(await browser.getPageSource())]),r.push(["console_log.txt",t.AssetType.CONSOLE_LOG,Buffer.from(t.APPLAUSE_LOG_RECORDS.getLogs().join("\n"))]),await Promise.allSettled(r.map((([s,t,r])=>this.reporter.attachTestCaseAsset(e,s,browser.sessionId,t,r))))}catch(e){this.logger.error("Error capturing assets"),this.logger.error(e)}}cleanErrorMessage(e){return e?.replace(/\\x1B\[[0-9;]*[a-zA-Z]/g,"")}},e.ApplauseRunService=class{reporter;logger;constructor(e){this.logger=e.logger||t.constructDefaultLogger(),this.reporter=new t.ApplauseReporter(t.loadConfig(e),this.logger)}async onPrepare(){const e=await this.reporter.runnerStart();process.env.APPLAUSE_RUN_ID=`${e}`}async onComplete(){await this.reporter.runnerEnd()}},e.ApplauseSkip=r,e.skip=function(e){throw new r(e)}}));
//# sourceMappingURL=index.min.js.map
