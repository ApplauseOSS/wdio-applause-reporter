{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\nimport {\n  ApplauseReporter,\n  ApplauseConfig,\n  TestResultStatus,\n  loadConfig,\n} from 'applause-reporter-common';\nimport { Browser } from 'webdriverio';\n\ndeclare let browser: Browser;\n\nexport class ApplauseWdioReporter extends WDIOReporter {\n  private reporter: ApplauseReporter;\n\n  constructor(options: Partial<ApplauseConfig>) {\n    super({ stdout: true, ...options });\n    const config = loadConfig({\n      properties: options,\n    });\n    // Setup the initial maps\n    this.reporter = new ApplauseReporter(config);\n  }\n\n  onRunnerStart() {\n    this.reporter.runnerStart();\n  }\n\n  onTestStart(testStats: TestStats): void {\n    this.reporter.startTestCase(testStats.uid, testStats.fullTitle, {\n      providerSessionIds: [browser.sessionId],\n    });\n  }\n\n  onTestPass(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.PASSED, {\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestFail(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.FAILED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestRetry(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestSkip(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    await this.reporter.runnerEnd();\n  }\n\n  get isSynchronised(): boolean {\n    return this.reporter.isSynchronized();\n  }\n}\n\nexport { ApplauseConfig };\n"],"names":["WDIOReporter","reporter","constructor","options","super","stdout","config","loadConfig","properties","this","ApplauseReporter","onRunnerStart","runnerStart","onTestStart","testStats","startTestCase","uid","fullTitle","providerSessionIds","browser","sessionId","onTestPass","test","submitTestCaseResult","TestResultStatus","PASSED","providerSessionGuids","onTestFail","FAILED","failureReason","error","message","onTestRetry","SKIPPED","onTestSkip","onRunnerEnd","runnerEnd","isSynchronised","isSynchronized"],"mappings":"8aAWM,cAAoCA,EAChCC,SAER,WAAAC,CAAYC,GACVC,MAAM,CAAEC,QAAQ,KAASF,IACzB,MAAMG,EAASC,EAAAA,WAAW,CACxBC,WAAYL,IAGdM,KAAKR,SAAW,IAAIS,EAAgBA,iBAACJ,EACtC,CAED,aAAAK,GACEF,KAAKR,SAASW,aACf,CAED,WAAAC,CAAYC,GACVL,KAAKR,SAASc,cAAcD,EAAUE,IAAKF,EAAUG,UAAW,CAC9DC,mBAAoB,CAACC,QAAQC,YAEhC,CAED,UAAAC,CAAWC,GACTb,KAAKR,SAASsB,qBAAqBD,EAAKN,IAAKQ,EAAgBA,iBAACC,OAAQ,CACpEC,qBAAsB,CAACP,QAAQC,YAElC,CAED,UAAAO,CAAWL,GACTb,KAAKR,SAASsB,qBAAqBD,EAAKN,IAAKQ,EAAgBA,iBAACI,OAAQ,CACpEC,cAAeP,EAAKQ,OAAOC,QAC3BL,qBAAsB,CAACP,QAAQC,YAElC,CAED,WAAAY,CAAYV,GACVb,KAAKR,SAASsB,qBAAqBD,EAAKN,IAAKQ,EAAgBA,iBAACS,QAAS,CACrEJ,cAAeP,EAAKQ,OAAOC,QAC3BL,qBAAsB,CAACP,QAAQC,YAElC,CAED,UAAAc,CAAWZ,GACTb,KAAKR,SAASsB,qBAAqBD,EAAKN,IAAKQ,EAAgBA,iBAACS,QAAS,CACrEJ,cAAeP,EAAKQ,OAAOC,QAC3BL,qBAAsB,CAACP,QAAQC,YAElC,CAED,iBAAMe,SACE1B,KAAKR,SAASmC,WACrB,CAED,kBAAIC,GACF,OAAO5B,KAAKR,SAASqC,gBACtB"}