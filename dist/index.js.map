{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\nexport class ApplauseReporter extends WDIOReporter {\n  private readonly autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(optionsIn: ApplauseOptions) {\n    /*\n     * make reporter to write to the output stream by default\n     */\n    const options = { ...{ stdout: true }, ...optionsIn };\n    super(options);\n    this.uidToResultIdMap = {};\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n    });\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.autoapi\n      .startTestCase(testStats.title)\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestPass(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.PASSED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestFail(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.FAILED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestRetry(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestSkip(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    void Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch(() => console.error('Unable to retrieve Applause TestResultIds'));\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["WDIOReporter","AutoApi","TestResultStatus","writeFileSync","pathJoin"],"mappings":"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"}