!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@wdio/reporter"),require("applause-reporter-common")):"function"==typeof define&&define.amd?define(["exports","@wdio/reporter","applause-reporter-common"],s):s((e="undefined"!=typeof globalThis?globalThis:e||self)["wdio-applause-reporter"]={},e.WDIOReporter,e.applauseReporterCommon)}(this,(function(e,s,t){"use strict";e.ApplausePlatformWdioReporter=class extends s{publciApi;config;inflightCalls=[];constructor(e){super({stdout:!0,...e}),this.config=t.loadConfig({properties:e}),this.publciApi=new t.PublicApi(this.config)}onTestPass(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;if(void 0!==s){const e=browser.capabilities;this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.PASSED,sessionDetailsJson:{value:{deviceName:e["appium:deviceName"],orientation:e["appium:orientation"],platformName:e.platformName,platformVersion:e["appium:platformVersion"],browserName:e.browserName,browserVersion:e.browserVersion}}}))}}onTestFail(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;void 0!==s&&this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.PASSED}))}onTestSkip(e){const s=t.parseTestCaseName(e.fullTitle).applauseTestCaseId;void 0!==s&&this.inflightCalls.push(this.publciApi.submitResult(Number(s),{testCycleId:this.config.applauseTestCycleId,status:t.TestRunAutoResultStatus.PASSED}))}async onRunnerEnd(){await Promise.all(this.inflightCalls)}get isSynchronised(){return 0===this.publciApi.getCallsInFlight}},e.ApplauseWdioReporter=class extends s{reporter;constructor(e){super({stdout:!0,...e});const s=t.loadConfig({properties:e});this.reporter=new t.ApplauseReporter(s)}onRunnerStart(){this.reporter.runnerStart()}onTestStart(e){this.reporter.startTestCase(e.uid,e.fullTitle,{providerSessionIds:[browser.sessionId]})}onTestPass(e){this.reporter.submitTestCaseResult(e.uid,t.TestResultStatus.PASSED,{providerSessionGuids:[browser.sessionId]})}onTestFail(e){this.reporter.submitTestCaseResult(e.uid,t.TestResultStatus.FAILED,{failureReason:e.error?.message,providerSessionGuids:[browser.sessionId]})}onTestRetry(e){this.reporter.submitTestCaseResult(e.uid,t.TestResultStatus.SKIPPED,{failureReason:e.error?.message,providerSessionGuids:[browser.sessionId]})}onTestSkip(e){this.reporter.submitTestCaseResult(e.uid,t.TestResultStatus.SKIPPED,{failureReason:e.error?.message,providerSessionGuids:[browser.sessionId]})}async onRunnerEnd(){await this.reporter.runnerEnd()}get isSynchronised(){return this.reporter.isSynchronized()}}}));
//# sourceMappingURL=index.min.js.map
