{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\nimport { Frameworks, Services } from '@wdio/types';\nimport {\n  APPLAUSE_LOG_RECORDS,\n  ApplauseConfig,\n  ApplauseReporter,\n  AssetType,\n  constructDefaultLogger,\n  loadConfig,\n  parseTestCaseName,\n  PublicApi,\n  TestResultStatus,\n  TestRunAutoResultStatus,\n} from 'applause-reporter-common';\nimport * as winston from 'winston';\n\nexport class ApplauseRunService implements Services.ServiceInstance {\n  reporter: ApplauseReporter;\n  logger: winston.Logger;\n\n  constructor(serviceOptions: Services.ServiceOption) {\n    this.logger =\n      (serviceOptions['logger'] as winston.Logger) || constructDefaultLogger();\n    this.reporter = new ApplauseReporter(\n      loadConfig(serviceOptions),\n      this.logger\n    );\n  }\n\n  async onPrepare() {\n    const testRunId = await this.reporter.runnerStart();\n    process.env['APPLAUSE_RUN_ID'] = `${testRunId}`;\n  }\n\n  async onComplete() {\n    await this.reporter.runnerEnd();\n  }\n}\n\nexport class ApplauseResultService implements Services.ServiceInstance {\n  reporter: ApplauseReporter;\n  logger: winston.Logger;\n  activeTest?: string;\n\n  constructor(serviceOptions: Services.ServiceOption) {\n    this.logger =\n      (serviceOptions['logger'] as winston.Logger) || constructDefaultLogger();\n    this.reporter = new ApplauseReporter(\n      loadConfig(serviceOptions),\n      this.logger\n    );\n  }\n\n  /**\n   * Before test hook. This is called for tests executed by the Mocha or Jasmine framework. See beforeScenario for\n   * execution of Cucumber tests.\n   *\n   * @param test The test object\n   */\n  async beforeTest(test: Frameworks.Test) {\n    const title = this.lookupTitle(test);\n    this.logger.info('Starting test: ' + title);\n    this.activeTest = title;\n    await this.reporter.startTestCase(title, title, {\n      providerSessionIds: [],\n    });\n  }\n\n  /**\n   * The beforeScenario hook is called before each scenario in a Cucumber test.\n   *\n   * @param world The cucumber world object\n   */\n  async beforeScenario(world: Frameworks.World) {\n    const title = this.lookupTitle(world);\n    this.logger.info('Starting Scenario: ' + title);\n    this.activeTest = title;\n    await this.reporter.startTestCase(title, title, {\n      providerSessionIds: [],\n    });\n  }\n\n  async afterCommand(\n    commandName: string,\n    args: unknown[],\n    result: unknown\n  ): Promise<void> {\n    if (!this.activeTest) {\n      return;\n    }\n    if (commandName.startsWith('saveScreenshot')) {\n      const screenshotName =\n        (args[0] as string).split('/').pop() || 'screenshot.png';\n      this.logger.debug('Capturing screenshot');\n      await this.reporter.attachTestCaseAsset(\n        this.activeTest,\n        screenshotName,\n        browser.sessionId,\n        AssetType.SCREENSHOT,\n        Buffer.from(result as string, 'base64')\n      );\n    }\n  }\n\n  /**\n   * The afterTest hook is called after each test in a Mocha or Jasmine test.\n   *\n   * @param test The test object\n   * @param _context The context object\n   * @param result The result object\n   */\n  async afterTest(\n    test: Frameworks.Test,\n    _context: unknown,\n    result: Frameworks.TestResult\n  ) {\n    this.activeTest = undefined;\n    const title = this.lookupTitle(test);\n    if (result.passed) {\n      this.logger.info('Test Passed: ' + title + ' (' + browser.sessionId + ')');\n    } else {\n      this.logger.error('Test Failed: ' + title);\n    }\n    const errorMessage: string  = result.error?.message || result.exception;\n    let status = TestResultStatus.FAILED;\n\n    if (result.passed) {\n      status = TestResultStatus.PASSED;\n    } else if (errorMessage.includes('skip')) {\n      status = TestResultStatus.SKIPPED;\n    }\n    await this.reporter.submitTestCaseResult(\n      title,\n      status,\n      {\n        failureReason: errorMessage,\n        providerSessionGuids: [browser.sessionId],\n      }\n    );\n    await this.captureAssets(title, result.passed);\n  }\n\n  /**\n   * The afterScenario hook is called after each scenario in a Cucumber test.\n   *\n   * @param world The cucumber world object\n   * @param result The result object\n   */\n  async afterScenario(world: Frameworks.World, result: Frameworks.TestResult) {\n    this.activeTest = undefined;\n    const title = this.lookupTitle(world);\n    if (result.passed) {\n      this.logger.info('Test Passed: ' + title);\n    } else {\n      this.logger.error('Test Failed: ' + title);\n    }\n    const errorMessage: string  = result.error?.message || result.exception;\n    await this.reporter.submitTestCaseResult(\n      title,\n      result.passed ? TestResultStatus.PASSED : TestResultStatus.FAILED,\n      {\n        failureReason: errorMessage,\n        providerSessionGuids: [browser.sessionId],\n      }\n    );\n    await this.captureAssets(title, result.passed);\n  }\n\n  /**\n   * Function to lookup the title from a Test or World object. WebdriverIO is inconsistent with where the title is stored. In some\n   * cases it is in the `fullName` property, in others it is in the `fullTitle` property, and in others it is in the `title` property.\n   * For cucumber, it is stored in the `pickle.name` property. If none of these are found, it will return '<Unknown Test>'.\n   *\n   * @param test The test or world object\n   * @returns The title of the test\n   */\n  private lookupTitle(\n    test: Partial<Frameworks.Test & Frameworks.World>\n  ): string {\n    if (test.fullName) {\n      return test.fullName;\n    }\n    if (test.fullTitle) {\n      return test.fullTitle;\n    }\n    if (!!test.parent && !!test.title) {\n      return test.parent + ' ' + test.title;\n    }\n    if (!!test.pickle && !!test.pickle.name) {\n      return test.pickle.name;\n    }\n    return '<Unknown Test>';\n  }\n\n  /**\n   * Function to capture assets for a test case. This includes a screenshot, page source, and console log. If the test case failed,\n   * the failure screenshot will be attached to the test case.\n   *\n   * @param resultId The result ID of the test case\n   * @param passed Whether the test case passed\n   */\n  private async captureAssets(\n    resultId: string,\n    passed: boolean\n  ): Promise<void> {\n    const assetsToUpload: [string, AssetType, Buffer][] = [];\n    try {\n      if (!passed) {\n        const screenshot = Buffer.from(\n          await browser.takeScreenshot(),\n          'base64'\n        );\n        assetsToUpload.push([\n          'failure_screenshot.png',\n          AssetType.FAILURE_SCREENSHOT,\n          screenshot,\n        ]);\n      }\n      assetsToUpload.push([\n        'page_source.html',\n        AssetType.PAGE_SOURCE,\n        Buffer.from(await browser.getPageSource()),\n      ]);\n      assetsToUpload.push([\n        'console_log.txt',\n        AssetType.CONSOLE_LOG,\n        Buffer.from(APPLAUSE_LOG_RECORDS.getLogs().join('\\n')),\n      ]);\n\n      await Promise.allSettled(\n        assetsToUpload.map(([name, type, data]) =>\n          this.reporter.attachTestCaseAsset(\n            resultId,\n            name,\n            browser.sessionId,\n            type,\n            data\n          )\n        )\n      );\n    } catch (e) {\n      this.logger.error('Error capturing assets');\n      this.logger.error(e);\n    }\n  }\n}\n\nexport class ApplausePlatformWdioReporter extends WDIOReporter {\n  private publciApi: PublicApi;\n  private config: ApplauseConfig;\n  private inflightCalls: Promise<unknown>[] = [];\n  private logger: winston.Logger;\n\n  constructor(options: Partial<ApplauseConfig & { logger: winston.Logger }>) {\n    super({ stdout: true, ...options });\n    this.config = loadConfig({\n      properties: options,\n    });\n    this.logger =\n      (options.logger as winston.Logger) || constructDefaultLogger();\n    // Setup the initial maps\n    this.publciApi = new PublicApi(this.config, this.logger);\n  }\n\n  onTestPass(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) passed`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestFail(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) failed`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.FAILED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestSkip(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) skipped`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.SKIPPED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    void (await Promise.all(this.inflightCalls));\n  }\n\n  get isSynchronised(): boolean {\n    return this.publciApi.getCallsInFlight === 0;\n  }\n}\n"],"names":["WDIOReporter","publciApi","config","inflightCalls","logger","constructor","options","super","stdout","this","loadConfig","properties","constructDefaultLogger","PublicApi","onTestPass","test","applauseTestCaseId","parseTestCaseName","fullTitle","undefined","info","caps","browser","capabilities","push","submitResult","Number","testCycleId","applauseTestCycleId","status","TestRunAutoResultStatus","PASSED","sessionDetailsJson","value","deviceName","orientation","platformName","platformVersion","browserName","browserVersion","onTestFail","FAILED","onTestSkip","SKIPPED","onRunnerEnd","Promise","all","isSynchronised","getCallsInFlight","reporter","activeTest","serviceOptions","ApplauseReporter","beforeTest","title","lookupTitle","startTestCase","providerSessionIds","beforeScenario","world","afterCommand","commandName","args","result","startsWith","screenshotName","split","pop","debug","attachTestCaseAsset","sessionId","AssetType","SCREENSHOT","Buffer","from","afterTest","_context","passed","error","errorMessage","message","exception","TestResultStatus","includes","submitTestCaseResult","failureReason","providerSessionGuids","captureAssets","afterScenario","fullName","parent","pickle","name","resultId","assetsToUpload","screenshot","takeScreenshot","FAILURE_SCREENSHOT","PAGE_SOURCE","getPageSource","CONSOLE_LOG","APPLAUSE_LOG_RECORDS","getLogs","join","allSettled","map","type","data","e","onPrepare","testRunId","runnerStart","process","env","onComplete","runnerEnd"],"mappings":"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"}