{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\nimport { Client } from 'webdriver';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus, TestRunHeartbeatService } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\ndeclare let browser: Client;\n\nexport class ApplauseReporter extends WDIOReporter {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n  private resultSubmissionMap: Record<number, Promise<void>>;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private isEnded: boolean = true;\n  private sdkHeartbeat?: TestRunHeartbeatService;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0 && this.isEnded;\n  }\n\n  constructor(options: ApplauseOptions) {\n    super({ stdout: true, ...options });\n\n    // Setup the initial maps\n    this.uidToResultIdMap = {};\n    this.resultSubmissionMap = {};\n\n    // Set up the auto-api client\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      testRailOptions: options.testRail\n    });\n  }\n\n  async onRunnerStart(): Promise<void> {\n    this.testRunId = this.autoapi.startTestRun({tests: []}).then(res => res.data.runId);\n    let runId = await this.testRunId;\n    this.isEnded = false;\n    this.sdkHeartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n    await this.sdkHeartbeat.start();\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.testRunId.then(runId => {\n      return this.autoapi!.startTestCase(\n        {\n          providerSessionIds: [browser.sessionId],\n          testCaseName: testStats.title,\n          testRunId: runId\n        }\n      )\n    }).then(res => {\n      return res.data.testResultId;\n    });\n  }\n\n  onTestPass(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.PASSED\n        }\n      );\n    });\n  }\n\n  onTestFail(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.FAILED\n        }\n      );\n    });\n  }\n\n  onTestRetry(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.SKIPPED\n        }\n      );\n    });\n  }\n\n  onTestSkip(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.SKIPPED\n        }\n      );\n    });\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    // Verify that the testRun has been created\n    let runId = await this.testRunId;\n\n    // Wait for all results to be created\n    let resultIds = await Promise.all(Object.values(this.uidToResultIdMap));\n\n    // Then wait for all results to be submitted\n    await Promise.all(Object.values(this.resultSubmissionMap));\n\n    // Shut down the heartbeat service\n    await this.sdkHeartbeat?.end();\n  \n    // End the test run\n    await this.autoapi.endTestRun(runId);\n\n    // Finally get the provider session links and output them to a file\n    const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n    this.isEnded = true;\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["ApplauseReporter","WDIOReporter","isSynchronised","undefined","this","autoapi","getCallsInFlight","isEnded","constructor","options","super","stdout","Promise","resolve","uidToResultIdMap","resultSubmissionMap","AutoApi","clientConfig","baseUrl","apiKey","productId","testRailOptions","testRail","onRunnerStart","testRunId","startTestRun","tests","then","res","data","runId","sdkHeartbeat","TestRunHeartbeatService","start","onTestStart","testStats","uid","startTestCase","providerSessionIds","browser","sessionId","testCaseName","title","testResultId","onTestPass","test","currentResultId","submitTestResult","status","TestResultStatus","PASSED","onTestFail","FAILED","onTestRetry","SKIPPED","onTestSkip","onRunnerEnd","_stats","resultIds","all","Object","values","end","endTestRun","jsonArray","getProviderSessionLinks","length","console","info","JSON","stringify","outputPath","config","outputDir","writeFileSync","pathJoin"],"mappings":"uhBAUaA,UAAyBC,UAWpC,kBAAIC,GACF,YAAwBC,IAAjBC,KAAKC,UAE0B,IAAlCD,KAAKC,QAAQC,kBAA0BF,KAAKG,SAGlD,WAAAC,CAAYC,GACVC,MAAM,CAAEC,QAAQ,KAASF,IAdnBL,eAA6BQ,QAAQC,QAAQ,GAC7CT,cAAmB,EAgBzBA,KAAKU,iBAAmB,GACxBV,KAAKW,oBAAsB,GAG3BX,KAAKC,QAAU,IAAIW,UAAQ,CACzBC,aAAc,CACZC,QAAST,EAAQS,QACjBC,OAAQV,EAAQU,QAElBC,UAAWX,EAAQW,UACnBC,gBAAiBZ,EAAQa,WAI7B,mBAAMC,GACJnB,KAAKoB,UAAYpB,KAAKC,QAAQoB,aAAa,CAACC,MAAO,KAAKC,MAAKC,GAAOA,EAAIC,KAAKC,QAC7E,IAAIA,QAAc1B,KAAKoB,UACvBpB,KAAKG,SAAU,EACfH,KAAK2B,aAAe,IAAIC,0BAAwBF,EAAO1B,KAAKC,eACtDD,KAAK2B,aAAaE,QAI1B,WAAAC,CAAYC,GACV/B,KAAKU,iBAAiBqB,EAAUC,KAAOhC,KAAKoB,UAAUG,MAAKG,GAClD1B,KAAKC,QAASgC,cACnB,CACEC,mBAAoB,CAACC,QAAQC,WAC7BC,aAAcN,EAAUO,MACxBlB,UAAWM,MAGdH,MAAKC,GACCA,EAAIC,KAAKc,eAIpB,UAAAC,CAAWC,GACTzC,KAAKU,iBAAiB+B,EAAKT,KAAKT,MAAKmB,IACnC1C,KAAKW,oBAAoB+B,GAAmB1C,KAAKC,QAAS0C,iBACxD,CACEJ,aAAcG,EACdE,OAAQC,mBAAiBC,QAE5B,IAIL,UAAAC,CAAWN,GACTzC,KAAKU,iBAAiB+B,EAAKT,KAAKT,MAAKmB,IACnC1C,KAAKW,oBAAoB+B,GAAmB1C,KAAKC,QAAS0C,iBACxD,CACEJ,aAAcG,EACdE,OAAQC,mBAAiBG,QAE5B,IAIL,WAAAC,CAAYR,GACVzC,KAAKU,iBAAiB+B,EAAKT,KAAKT,MAAKmB,IACnC1C,KAAKW,oBAAoB+B,GAAmB1C,KAAKC,QAAS0C,iBACxD,CACEJ,aAAcG,EACdE,OAAQC,mBAAiBK,SAE5B,IAIL,UAAAC,CAAWV,GACTzC,KAAKU,iBAAiB+B,EAAKT,KAAKT,MAAKmB,IACnC1C,KAAKW,oBAAoB+B,GAAmB1C,KAAKC,QAAS0C,iBACxD,CACEJ,aAAcG,EACdE,OAAQC,mBAAiBK,SAE5B,IAIL,iBAAME,CAAYC,GAEhB,IAAI3B,QAAc1B,KAAKoB,UAGnBkC,QAAkB9C,QAAQ+C,IAAIC,OAAOC,OAAOzD,KAAKU,yBAG/CF,QAAQ+C,IAAIC,OAAOC,OAAOzD,KAAKW,4BAG/BX,KAAK2B,cAAc+B,aAGnB1D,KAAKC,QAAQ0D,WAAWjC,GAG9B,MACMkC,SADa5D,KAAKC,QAAS4D,wBAAwBP,IAClC7B,MAAQ,GAC/B,GAAImC,EAAUE,OAAS,EAAG,CACxBC,QAAQC,KAAKC,KAAKC,UAAUN,IAE5B,MAAMO,EAAad,EAAOe,OAAOC,WAAa,IAC9CC,gBACEC,OAASJ,EAAY,oBACrBF,KAAKC,UAAUN,EAAW,KAAM,IAGpC5D,KAAKG,SAAU"}