{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\nimport { Frameworks, Services } from '@wdio/types';\nimport {\n  APPLAUSE_LOG_RECORDS,\n  ApplauseConfig,\n  ApplauseReporter,\n  AssetType,\n  constructDefaultLogger,\n  loadConfig,\n  parseTestCaseName,\n  PublicApi,\n  TestResultStatus,\n  TestRunAutoResultStatus,\n} from 'applause-reporter-common';\nimport { SevereServiceError } from 'webdriverio';\nimport * as winston from 'winston';\n\nexport class ApplauseRunService implements Services.ServiceInstance {\n  reporter: ApplauseReporter;\n  logger: winston.Logger;\n\n  constructor(serviceOptions: Services.ServiceOption) {\n    this.logger =\n      (serviceOptions['logger'] as winston.Logger) || constructDefaultLogger();\n    this.reporter = new ApplauseReporter(\n      loadConfig(serviceOptions),\n      this.logger\n    );\n  }\n\n  async onPrepare() {\n    try {\n      const testRunId = await this.reporter.runnerStart();\n      process.env['APPLAUSE_RUN_ID'] = `${testRunId}`;\n    } catch {\n      throw new SevereServiceError(\"Failed to start Applause reporter, please check logs\");\n    }\n  }\n\n  async onComplete() {\n    await this.reporter.runnerEnd();\n  }\n}\n\nexport class ApplauseResultService implements Services.ServiceInstance {\n  reporter: ApplauseReporter;\n  logger: winston.Logger;\n  activeTest?: string;\n\n  constructor(serviceOptions: Services.ServiceOption) {\n    this.logger =\n      (serviceOptions['logger'] as winston.Logger) || constructDefaultLogger();\n    this.reporter = new ApplauseReporter(\n      loadConfig(serviceOptions),\n      this.logger\n    );\n  }\n\n  /**\n   * Before test hook. This is called for tests executed by the Mocha or Jasmine framework. See beforeScenario for\n   * execution of Cucumber tests.\n   *\n   * @param test The test object\n   */\n  async beforeTest(test: Frameworks.Test) {\n    const title = this.lookupTitle(test);\n    this.logger.info('Starting test: ' + title);\n    this.activeTest = title;\n    await this.reporter.startTestCase(title, title, {\n      providerSessionIds: [],\n    });\n  }\n\n  /**\n   * The beforeScenario hook is called before each scenario in a Cucumber test.\n   *\n   * @param world The cucumber world object\n   */\n  async beforeScenario(world: Frameworks.World) {\n    const title = this.lookupTitle(world);\n    this.logger.info('Starting Scenario: ' + title);\n    this.activeTest = title;\n    await this.reporter.startTestCase(title, title, {\n      providerSessionIds: [],\n    });\n  }\n\n  async afterCommand(\n    commandName: string,\n    args: unknown[],\n    result: unknown\n  ): Promise<void> {\n    if (!this.activeTest) {\n      return;\n    }\n    if (commandName.startsWith('saveScreenshot')) {\n      const screenshotName =\n        (args[0] as string).split('/').pop() || 'screenshot.png';\n      this.logger.debug('Capturing screenshot');\n      await this.reporter.attachTestCaseAsset(\n        this.activeTest,\n        screenshotName,\n        browser.sessionId,\n        AssetType.SCREENSHOT,\n        Buffer.from(result as string, 'base64')\n      );\n    }\n  }\n\n  /**\n   * The afterTest hook is called after each test in a Mocha or Jasmine test.\n   *\n   * @param test The test object\n   * @param _context The context object\n   * @param result The result object\n   */\n  async afterTest(\n    test: Frameworks.Test,\n    _context: unknown,\n    result: Frameworks.TestResult\n  ) {\n    this.activeTest = undefined;\n    const title = this.lookupTitle(test);\n    \n    const errorMessage: string | undefined  = result.error?.message || result.exception;\n\n    let status: TestResultStatus;\n    if (result.passed) {\n      this.logger.info('Test Passed: ' + title + ' (' + browser.sessionId + ')');\n      status = TestResultStatus.PASSED;\n    } else if (test.pending || result.error instanceof ApplauseSkip) {\n      this.logger.warn('Test Skipped: ' + title);\n      status = TestResultStatus.SKIPPED;\n    } else {\n      this.logger.error('Test Failed: ' + title);\n      status = TestResultStatus.FAILED;\n    }\n\n    await this.reporter.submitTestCaseResult(\n      title,\n      status,\n      {\n        failureReason: this.cleanErrorMessage(errorMessage),\n        providerSessionGuids: [browser.sessionId],\n      }\n    );\n    await this.captureAssets(title, result.passed);\n  }\n\n  /**\n   * The afterScenario hook is called after each scenario in a Cucumber test.\n   *\n   * @param world The cucumber world object\n   * @param result The result object\n   */\n  async afterScenario(world: Frameworks.World, result: Frameworks.TestResult) {\n    this.activeTest = undefined;\n    const title = this.lookupTitle(world);\n    const errorMessage: string | undefined  = result.error?.message || result.exception;\n\n    let status: TestResultStatus;\n    if (result.passed) {\n      this.logger.info('Test Passed: ' + title + ' (' + browser.sessionId + ')');\n      status = TestResultStatus.PASSED;\n    } else if (result.error instanceof ApplauseSkip) {\n      this.logger.info('Test Skipped: ' + title);\n      status = TestResultStatus.SKIPPED;\n    } else {\n      this.logger.error('Test Failed: ' + title);\n      status = TestResultStatus.FAILED;\n    }\n    await this.reporter.submitTestCaseResult(\n      title,\n      status,\n      {\n        failureReason: this.cleanErrorMessage(errorMessage),\n        providerSessionGuids: [browser.sessionId],\n      }\n    );\n    await this.captureAssets(title, result.passed);\n  }\n\n  /**\n   * Function to lookup the title from a Test or World object. WebdriverIO is inconsistent with where the title is stored. In some\n   * cases it is in the `fullName` property, in others it is in the `fullTitle` property, and in others it is in the `title` property.\n   * For cucumber, it is stored in the `pickle.name` property. If none of these are found, it will return '<Unknown Test>'.\n   *\n   * @param test The test or world object\n   * @returns The title of the test\n   */\n  private lookupTitle(\n    test: Partial<Frameworks.Test & Frameworks.World>\n  ): string {\n    if (test.fullName) {\n      return test.fullName;\n    }\n    if (test.fullTitle) {\n      return test.fullTitle;\n    }\n    if (!!test.parent && !!test.title) {\n      return test.parent + ' ' + test.title;\n    }\n    if (!!test.pickle && !!test.pickle.name) {\n      return test.pickle.name;\n    }\n    return '<Unknown Test>';\n  }\n\n  /**\n   * Function to capture assets for a test case. This includes a screenshot, page source, and console log. If the test case failed,\n   * the failure screenshot will be attached to the test case.\n   *\n   * @param resultId The result ID of the test case\n   * @param passed Whether the test case passed\n   */\n  private async captureAssets(\n    resultId: string,\n    passed: boolean\n  ): Promise<void> {\n    const assetsToUpload: [string, AssetType, Buffer][] = [];\n    try {\n      if (!passed) {\n        const screenshot = Buffer.from(\n          await browser.takeScreenshot(),\n          'base64'\n        );\n        assetsToUpload.push([\n          'failure_screenshot.png',\n          AssetType.FAILURE_SCREENSHOT,\n          screenshot,\n        ]);\n      }\n      assetsToUpload.push([\n        'page_source.html',\n        AssetType.PAGE_SOURCE,\n        Buffer.from(await browser.getPageSource()),\n      ]);\n      assetsToUpload.push([\n        'console_log.txt',\n        AssetType.CONSOLE_LOG,\n        Buffer.from(APPLAUSE_LOG_RECORDS.getLogs().join('\\n')),\n      ]);\n\n      await Promise.allSettled(\n        assetsToUpload.map(([name, type, data]) =>\n          this.reporter.attachTestCaseAsset(\n            resultId,\n            name,\n            browser.sessionId,\n            type,\n            data\n          )\n        )\n      );\n    } catch (e) {\n      this.logger.error('Error capturing assets');\n      this.logger.error(e);\n    }\n  }\n\n  cleanErrorMessage(str?: string): string | undefined {\n    return str?.replace(/\\\\x1B\\[[0-9;]*[a-zA-Z]/g, '');\n}\n}\n\nexport class ApplausePlatformWdioReporter extends WDIOReporter {\n  private publciApi: PublicApi;\n  private config: ApplauseConfig;\n  private inflightCalls: Promise<unknown>[] = [];\n  private logger: winston.Logger;\n\n  constructor(options: Partial<ApplauseConfig & { logger: winston.Logger }>) {\n    super({ stdout: true, ...options });\n    this.config = loadConfig({\n      properties: options,\n    });\n    this.logger =\n      (options.logger as winston.Logger) || constructDefaultLogger();\n    // Setup the initial maps\n    this.publciApi = new PublicApi(this.config, this.logger);\n  }\n\n  onTestPass(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) passed`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestFail(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) failed`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.FAILED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestSkip(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.logger.info(`Test ${test.fullTitle}(${applauseTestCaseId}) skipped`);\n      const caps = browser.capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.SKIPPED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    void (await Promise.all(this.inflightCalls));\n  }\n\n  get isSynchronised(): boolean {\n    return this.publciApi.getCallsInFlight === 0;\n  }\n}\n\nexport class ApplauseSkip extends Error {\n  readonly message: string;\n\n  constructor(message: string) {\n    super(\"ApplauseSkip: \" + message);\n    this.message = message;\n  }\n}\n\nexport function skip(message: string) {\n  throw new ApplauseSkip(message);\n}\n"],"names":["constructDefaultLogger","ApplauseReporter","loadConfig","SevereServiceError","AssetType","TestResultStatus","APPLAUSE_LOG_RECORDS","PublicApi","parseTestCaseName","TestRunAutoResultStatus"],"mappings":"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"}