{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\nimport { Client } from 'webdriver';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus, TestRunHeartbeatService } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\ndeclare let browser: Client;\n\nexport class ApplauseReporter extends WDIOReporter {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n  private resultSubmissionMap: Record<number, Promise<void>>;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private isEnded: boolean = true;\n  private sdkHeartbeat?: TestRunHeartbeatService;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0 && this.isEnded;\n  }\n\n  constructor(options: ApplauseOptions) {\n    super({ stdout: true, ...options });\n\n    // Setup the initial maps\n    this.uidToResultIdMap = {};\n    this.resultSubmissionMap = {};\n\n    // Set up the auto-api client\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      testRailOptions: options.testRail\n    });\n  }\n\n  async onRunnerStart(): Promise<void> {\n    this.testRunId = this.autoapi.startTestRun({tests: []}).then(res => res.data.runId);\n    let runId = await this.testRunId;\n    this.isEnded = false;\n    this.sdkHeartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n    await this.sdkHeartbeat.start();\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.testRunId.then(runId => {\n      return this.autoapi!.startTestCase(\n        {\n          providerSessionIds: [browser.sessionId],\n          testCaseName: testStats.title,\n          testRunId: runId\n        }\n      )\n    }).then(res => {\n      return res.data.testResultId;\n    });\n  }\n\n  onTestPass(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.PASSED\n        }\n      );\n    });\n  }\n\n  onTestFail(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.FAILED\n        }\n      );\n    });\n  }\n\n  onTestRetry(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.SKIPPED\n        }\n      );\n    });\n  }\n\n  onTestSkip(test: TestStats): void {\n    this.uidToResultIdMap[test.uid].then(currentResultId => {\n      this.resultSubmissionMap[currentResultId] = this.autoapi!.submitTestResult(\n        {\n          testResultId: currentResultId,\n          status: TestResultStatus.SKIPPED\n        }\n      );\n    });\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    // Verify that the testRun has been created\n    let runId = await this.testRunId;\n\n    // Wait for all results to be created\n    let resultIds = await Promise.all(Object.values(this.uidToResultIdMap));\n\n    // Then wait for all results to be submitted\n    await Promise.all(Object.values(this.resultSubmissionMap));\n\n    // Shut down the heartbeat service\n    await this.sdkHeartbeat?.end();\n  \n    // End the test run\n    await this.autoapi.endTestRun(runId);\n\n    // Finally get the provider session links and output them to a file\n    const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n    this.isEnded = true;\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["pathJoin"],"mappings":"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"}