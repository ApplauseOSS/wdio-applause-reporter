{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\nimport {\n  ApplauseReporter,\n  ApplauseConfig,\n  TestResultStatus,\n  loadConfig,\n  parseTestCaseName,\n  PublicApi,\n  TestRunAutoResultStatus,\n} from 'applause-reporter-common';\nimport { Browser } from 'webdriverio';\n\ndeclare let browser: Browser;\n\nexport class ApplauseWdioReporter extends WDIOReporter {\n  private reporter: ApplauseReporter;\n\n  constructor(options: Partial<ApplauseConfig>) {\n    super({ stdout: true, ...options });\n    const config = loadConfig({\n      properties: options,\n    });\n    // Setup the initial maps\n    this.reporter = new ApplauseReporter(config);\n  }\n\n  onRunnerStart() {\n    this.reporter.runnerStart();\n  }\n\n  onTestStart(testStats: TestStats): void {\n    this.reporter.startTestCase(testStats.uid, testStats.fullTitle, {\n      providerSessionIds: [browser.sessionId],\n    });\n  }\n\n  onTestPass(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.PASSED, {\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestFail(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.FAILED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestRetry(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestSkip(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    await this.reporter.runnerEnd();\n  }\n\n  get isSynchronised(): boolean {\n    return this.reporter.isSynchronized();\n  }\n}\n\nexport class ApplausePlatformWdioReporter extends WDIOReporter {\n  private publciApi: PublicApi;\n  private config: ApplauseConfig;\n  private inflightCalls: Promise<any>[] = [];\n\n  constructor(options: Partial<ApplauseConfig>) {\n    super({ stdout: true, ...options });\n    this.config = loadConfig({\n      properties: options,\n    });\n    // Setup the initial maps\n    this.publciApi = new PublicApi(this.config);\n  }\n\n  onTestPass(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      const caps = browser.capabilities as WebdriverIO.Capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestFail(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n        })\n      );\n    }\n  }\n\n  onTestSkip(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n        })\n      );\n    }\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    void (await Promise.all(this.inflightCalls));\n  }\n\n  get isSynchronised(): boolean {\n    return this.publciApi.getCallsInFlight === 0;\n  }\n}\n\nexport { ApplauseConfig };\n"],"names":["loadConfig","ApplauseReporter","TestResultStatus","PublicApi","parseTestCaseName","TestRunAutoResultStatus"],"mappings":"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"}