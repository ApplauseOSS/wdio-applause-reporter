{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\n// eslint-disable-next-line node/no-extraneous-import\nimport type { Reporters } from '@wdio/types';\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\n\nexport class ApplauseReporter extends WDIOReporter {\n  private readonly autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(optionsIn: Partial<Reporters.Options> & ApplauseOptions) {\n    /*\n     * make reporter to write to the output stream by default\n     */\n    const options = { ...{ stdout: true }, ...optionsIn };\n    super(options);\n    this.uidToResultIdMap = {};\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n    });\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.autoapi\n      .startTestCase(testStats.title)\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestPass(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.PASSED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestFail(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.FAILED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestRetry(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestSkip(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["ApplauseReporter","WDIOReporter","constructor","optionsIn","options","stdout","super","this","uidToResultIdMap","autoapi","AutoApi","clientConfig","baseUrl","apiKey","productId","isSynchronised","getCallsInFlight","onTestStart","testStats","uid","startTestCase","title","then","res","data","testResultId","async","test","currentResultId","submitTestResult","TestResultStatus","PASSED","FAILED","SKIPPED"],"mappings":"6dAMaA,UAAyBC,UAWpCC,YAAYC,GAIV,MAAMC,EAAU,CAAOC,QAAQ,KAAWF,GAC1CG,MAAMF,GACNG,KAAKC,iBAAmB,GACxBD,KAAKE,QAAU,IAAIC,UAAQ,CACzBC,aAAc,CACZC,QAASR,EAAQQ,QACjBC,OAAQT,EAAQS,QAElBC,UAAWV,EAAQU,YAhBnBC,qBACF,OAAyC,IAAlCR,KAAKE,QAAQO,iBAoBtBC,YAAYC,GACVX,KAAKC,iBAAiBU,EAAUC,KAAOZ,KAAKE,QACzCW,cAAcF,EAAUG,OACxBC,MAAKC,GACGA,EAAIC,KAAKC,eAKtBC,iBAAiBC,GACf,MAAMC,QAAwBrB,KAAKC,iBAAiBmB,EAAKR,WACnDZ,KAAKE,QAAQoB,iBACjBD,EACAE,mBAAiBC,QAKrBL,iBAAiBC,GACf,MAAMC,QAAwBrB,KAAKC,iBAAiBmB,EAAKR,WACnDZ,KAAKE,QAAQoB,iBACjBD,EACAE,mBAAiBE,QAKrBN,kBAAkBC,GAChB,MAAMC,QAAwBrB,KAAKC,iBAAiBmB,EAAKR,WACnDZ,KAAKE,QAAQoB,iBACjBD,EACAE,mBAAiBG,SAKrBP,iBAAiBC,GACf,MAAMC,QAAwBrB,KAAKC,iBAAiBmB,EAAKR,WACnDZ,KAAKE,QAAQoB,iBACjBD,EACAE,mBAAiBG"}