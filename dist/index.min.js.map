{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { RunnerStats, TestStats } from '@wdio/reporter';\nimport { Client } from 'webdriver';\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { ApplauseOptions } from './applause-options';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\ndeclare let browser: Client;\n\nexport class ApplauseReporter extends WDIOReporter {\n  private readonly autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>>;\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(optionsIn: ApplauseOptions) {\n    /*\n     * make reporter to write to the output stream by default\n     */\n    const options = { ...{ stdout: true }, ...optionsIn };\n    super(options);\n    this.uidToResultIdMap = {};\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n    });\n  }\n\n  /** This start method CANNOT be async. We need to get the resultId UID mapping promise started before any other hooks run for each test */\n  onTestStart(testStats: TestStats): void {\n    this.uidToResultIdMap[testStats.uid] = this.autoapi\n      .startTestCase(testStats.title, browser.sessionId)\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestPass(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.PASSED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestFail(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.FAILED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestRetry(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async onTestSkip(test: TestStats): Promise<void> {\n    const currentResultId = await this.uidToResultIdMap[test.uid];\n    await this.autoapi.submitTestResult(\n      currentResultId,\n      TestResultStatus.SKIPPED\n    );\n  }\n\n  async onRunnerEnd(_stats: RunnerStats): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch(() => console.error('Unable to retrieve Applause TestResultIds'));\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = _stats.config.outputDir || '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n\n// re-export this so its public to our module users\nexport { ApplauseOptions } from './applause-options';\n"],"names":["ApplauseReporter","WDIOReporter","constructor","optionsIn","options","stdout","super","this","uidToResultIdMap","autoapi","AutoApi","clientConfig","baseUrl","apiKey","productId","isSynchronised","getCallsInFlight","onTestStart","testStats","uid","startTestCase","title","browser","sessionId","then","res","data","testResultId","async","test","currentResultId","submitTestResult","TestResultStatus","PASSED","FAILED","SKIPPED","_stats","valuePromises","Object","values","resultIds","Promise","all","vals","catch","console","error","jsonArray","getProviderSessionLinks","length","info","JSON","stringify","outputPath","config","outputDir","writeFileSync","pathJoin"],"mappings":"uhBAUaA,UAAyBC,UAWpCC,YAAYC,GAIV,MAAMC,EAAU,CAAOC,QAAQ,KAAWF,GAC1CG,MAAMF,GACNG,KAAKC,iBAAmB,GACxBD,KAAKE,QAAU,IAAIC,UAAQ,CACzBC,aAAc,CACZC,QAASR,EAAQQ,QACjBC,OAAQT,EAAQS,QAElBC,UAAWV,EAAQU,YAhBnBC,qBACF,OAAyC,IAAlCR,KAAKE,QAAQO,iBAoBtBC,YAAYC,GACVX,KAAKC,iBAAiBU,EAAUC,KAAOZ,KAAKE,QACzCW,cAAcF,EAAUG,MAAOC,QAAQC,WACvCC,MAAKC,GACGA,EAAIC,KAAKC,eAKtBC,iBAAiBC,GACf,MAAMC,QAAwBvB,KAAKC,iBAAiBqB,EAAKV,WACnDZ,KAAKE,QAAQsB,iBACjBD,EACAE,mBAAiBC,QAKrBL,iBAAiBC,GACf,MAAMC,QAAwBvB,KAAKC,iBAAiBqB,EAAKV,WACnDZ,KAAKE,QAAQsB,iBACjBD,EACAE,mBAAiBE,QAKrBN,kBAAkBC,GAChB,MAAMC,QAAwBvB,KAAKC,iBAAiBqB,EAAKV,WACnDZ,KAAKE,QAAQsB,iBACjBD,EACAE,mBAAiBG,SAKrBP,iBAAiBC,GACf,MAAMC,QAAwBvB,KAAKC,iBAAiBqB,EAAKV,WACnDZ,KAAKE,QAAQsB,iBACjBD,EACAE,mBAAiBG,SAIrBP,kBAAkBQ,GAChB,MAAMC,EAAmCC,OAAOC,OAC9ChC,KAAKC,kBAEP,IAAIgC,EAAsB,SACpBC,QAAQC,IAAIL,GACfb,MAAKmB,GAASH,EAAoB,MAARG,EAAe,GAAKA,IAC9CC,OAAM,IAAMC,QAAQC,MAAM,+CAC7B,MACMC,SADaxC,KAAKE,QAAQuC,wBAAwBR,IACjCd,MAAQ,GAC/B,GAAIqB,EAAUE,OAAS,EAAG,CACxBJ,QAAQK,KAAKC,KAAKC,UAAUL,IAE5B,MAAMM,EAAajB,EAAOkB,OAAOC,WAAa,IAC9CC,gBACEC,OAASJ,EAAY,oBACrBF,KAAKC,UAAUL,EAAW,KAAM"}