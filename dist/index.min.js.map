{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import WDIOReporter, { TestStats } from '@wdio/reporter';\nimport {\n  ApplauseReporter,\n  ApplauseConfig,\n  TestResultStatus,\n  loadConfig,\n  PublicApi,\n  parseTestCaseName,\n  TestRunAutoResultStatus,\n} from 'applause-reporter-common';\nimport { Browser } from 'webdriverio';\n\ndeclare let browser: Browser;\n\nexport class ApplauseWdioReporter extends WDIOReporter {\n  private reporter: ApplauseReporter;\n\n  constructor(options: Partial<ApplauseConfig>) {\n    super({ stdout: true, ...options });\n    const config = loadConfig({\n      properties: options,\n    });\n    // Setup the initial maps\n    this.reporter = new ApplauseReporter(config);\n  }\n\n  onRunnerStart() {\n    this.reporter.runnerStart();\n  }\n\n  onTestStart(testStats: TestStats): void {\n    this.reporter.startTestCase(testStats.uid, testStats.fullTitle, {\n      providerSessionIds: [browser.sessionId],\n    });\n  }\n\n  onTestPass(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.PASSED, {\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestFail(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.FAILED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestRetry(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  onTestSkip(test: TestStats): void {\n    this.reporter.submitTestCaseResult(test.uid, TestResultStatus.SKIPPED, {\n      failureReason: test.error?.message,\n      providerSessionGuids: [browser.sessionId],\n    });\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    await this.reporter.runnerEnd();\n  }\n\n  get isSynchronised(): boolean {\n    return this.reporter.isSynchronized();\n  }\n}\n\nexport class ApplausePlatformWdioReporter extends WDIOReporter {\n  private publciApi: PublicApi;\n  private config: ApplauseConfig;\n  private inflightCalls: Promise<any>[] = [];\n\n  constructor(options: Partial<ApplauseConfig>) {\n    super({ stdout: true, ...options });\n    this.config = loadConfig({\n      properties: options,\n    });\n    // Setup the initial maps\n    this.publciApi = new PublicApi(this.config);\n  }\n\n  onTestPass(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      const caps = browser.capabilities as WebdriverIO.Capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.PASSED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestFail(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      const caps = browser.capabilities as WebdriverIO.Capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.FAILED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  onTestSkip(test: TestStats): void {\n    const applauseTestCaseId = parseTestCaseName(\n      test.fullTitle\n    ).applauseTestCaseId;\n    if (applauseTestCaseId !== undefined) {\n      const caps = browser.capabilities as WebdriverIO.Capabilities;\n      this.inflightCalls.push(\n        this.publciApi.submitResult(Number(applauseTestCaseId), {\n          testCycleId: this.config.applauseTestCycleId!,\n          status: TestRunAutoResultStatus.SKIPPED,\n          sessionDetailsJson: {\n            value: {\n              deviceName: caps['appium:deviceName'],\n              orientation: caps['appium:orientation'],\n              platformName: caps.platformName,\n              platformVersion: caps['appium:platformVersion'],\n              browserName: caps.browserName,\n              browserVersion: caps.browserVersion,\n            },\n          },\n        })\n      );\n    }\n  }\n\n  async onRunnerEnd(): Promise<void> {\n    void (await Promise.all(this.inflightCalls));\n  }\n\n  get isSynchronised(): boolean {\n    return this.publciApi.getCallsInFlight === 0;\n  }\n}\n\nexport { ApplauseConfig };\n"],"names":["WDIOReporter","publciApi","config","inflightCalls","constructor","options","super","stdout","this","loadConfig","properties","PublicApi","onTestPass","test","applauseTestCaseId","parseTestCaseName","fullTitle","undefined","caps","browser","capabilities","push","submitResult","Number","testCycleId","applauseTestCycleId","status","TestRunAutoResultStatus","PASSED","sessionDetailsJson","value","deviceName","orientation","platformName","platformVersion","browserName","browserVersion","onTestFail","FAILED","onTestSkip","SKIPPED","onRunnerEnd","Promise","all","isSynchronised","getCallsInFlight","reporter","ApplauseReporter","onRunnerStart","runnerStart","onTestStart","testStats","startTestCase","uid","providerSessionIds","sessionId","submitTestCaseResult","TestResultStatus","providerSessionGuids","failureReason","error","message","onTestRetry","runnerEnd","isSynchronized"],"mappings":"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"}